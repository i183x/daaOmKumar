SEGMENTED SIEVE

import java.util.*;
public class Main {
    static void SegSieve(int l, int h) {
        boolean prime[] = new boolean[h + 1];
        for (int p = 2; p * p <= h; p++) {
            int sm = (l / p) * p;
            if (sm < l) {
                sm = sm + p;
            }
            for (int i = sm; i <= h; i += p)
                prime[i] = true;
        }
        for (int i = Math.max(2, l); i <= h; i++) {
            if (!prime[i])
                System.out.print(i + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the lower bound (l): ");
        int l = scanner.nextInt();
        System.out.print("Enter the upper bound (h): ");
        int h = scanner.nextInt();
        scanner.close();
        System.out.println("Prime numbers in the range [" + l + ", " + h + "]: ");
        SegSieve(l, h);
    }
}
===============================================================
EULHER PHI

import java.util.*;
class Main{
    public static int phi(int n){
    int result=n;
    for (int p=2;p*p<=n;p++){
        if(n%p==0){
            while(n%p==0){
                n/=p;
            }
            result-=result/p;
        }
    }
    if(n>1){
        result-=result/n;
    }
    return result;
}
    public static void main (String args[] ) {
        Scanner s = new Scanner (System.in);
        int n=s.nextInt();
        int phi_n=phi(n);
        System.out.println("phi("+n+")= "+phi_n);
        s.close();
        
        
}
}
==============================
SABROGRAMMATIC NUMBER

import java.util.*;
class Main{
    public static boolean isStrobogrammatic(String number) {
        char[] mirror = {'0', '1', ' ', ' ', ' ', ' ', '9', ' ', '8', '6'};
        int left = 0;
        int right = number.length() - 1;

        while (left <= right) {
            char leftDigit = number.charAt(left);
            char rightDigit = number.charAt(right);
            char mirrorLeft = mirror[leftDigit - '0'];
            char mirrorRight = mirror[rightDigit - '0'];

            if (mirrorLeft == ' ' || mirrorRight == ' ' || mirrorLeft != rightDigit || mirrorRight != leftDigit) {
                return false;
            }

            left++;
            right--;
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String number = scanner.nextLine();
        scanner.close();

        if (isStrobogrammatic(number)) {
            System.out.println("The number is strobogrammatic.");
        } else {
            System.out.println("The number is not strobogrammatic.");
        }
    }
   
}
============================================================================
CHINESE REMAINDER 

import java.util.*;

class Main {
    static int findMinX(int num[], int rem[], int k) {
        int x = 1;
        while (true) {
            int j;
            for (j = 0; j < k; j++) {
                if (x % num[j] != rem[j])
                    break;
            }

            if (j == k)
                return x;
            x++;
        }
    }

    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        int k = scanner.nextInt();

        int[] num = new int[k];
        int[] rem = new int[k];

        for (int i = 0; i < k; i++) {
            num[i] = scanner.nextInt();
        }

        for (int i = 0; i < k; i++) {
            rem[i] = scanner.nextInt();
        }

        System.out.println("x is " + findMinX(num, rem, k));
        scanner.close();
    }
}
===============================================================
ALICE APPLE 

import java.util.*;
class Main{
     public static void main (String args[] ){
         Scanner s=new Scanner(System.in);
         int apple=s.nextInt();
         int cnt=0;int sum=0;
         while(sum<apple){
             cnt++;
             sum+=(12*cnt*cnt);
             
         }
         System.out.println((8*(cnt)));
         
     }
}
================================================================
TOGGLE THE SWITCH (DOOR PROBLEM)

import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        boolean b[] = new boolean[n + 1];
        int i, j, c = 0, o = 0;

        for (i = 1; i <= n; i++) {
            for (j = i; j * i <= n; j++) {
                if (b[j] == false) {
                    b[j] = true;
                } else {
                    b[j] = false;
                }
            }
        }

        for (i = 1; i <= n; i++) {
            if (b[i] == true) {
                c++;
            } else {
                o++;
            }
        }

        System.out.println("No Of Doors open " + c);
        System.out.println("No Of Doors closed " + o);
    }
}
========================================================
BINARY PALINDROME

import java.util.*;

class Main {
    public static boolean isBinaryPalindrome(int x) {
        int reversed = 0;
        int original = x;
        while (x > 0) {
            reversed <<= 1;             // Left shift by 1 bit
            reversed |= (x & 1);        // Add the least significant bit of 'x' to 'reversed'
            x >>= 1;                    // Right shift by 1 bit
        }
        return reversed == original;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        if (isBinaryPalindrome(x)) {
            System.out.println(x + " has a binary palindrome representation.");
        } else {
            System.out.println(x + " does not have a binary palindrome representation.");
        }
    }
}
============================================================
BOOTH ALGORITHM

import java.util.*;
class Main{
    public static int multiply(int n1, int n2) {
        int m = n1;
        int r = n2;
        int A = n1;
        int S = -n1;
        int P = 0;
        int count = Integer.SIZE;            
        System.out.print(count);
                    while (count > 0) {
            if ((r & 1) == 1) {
                P += A;
                S += m;
            }
            A <<= 1;
            S <<= 1;
            count--;
            r >>= 1;
        }
        return P;
    }

     public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n1 = scan.nextInt();
        int n2 = scan.nextInt();
        int result = multiply(n1, n2);
        System.out.println("\n\nResult : " + n1 + " * " + n2 + " = " + result);
}
}
==================================================
EUCLID ALGORITHM (GCD)

import java.util.*;
class Main {
    public static int gcd(int a, int b) {
        if (a == 0)
            return b;

        return gcd(b % a, a);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int g = gcd(a, b);
        System.out.println("GCD(" + a + " , " + b + ") = " + g);

        sc.close();
    }
}
=====================================================
KARATSUBA ALGORTIHM

import java.util.*;

class Main {
    public static long karatsubaMultiply(long x, long y) {
        if (x < 10 || y < 10) {
            return x * y;
        }
        int n = Math.max(Long.toString(x).length(), Long.toString(y).length());
        int half = (n + 1) / 2;

        long a = x / (long) Math.pow(10, half);
        long b = x % (long) Math.pow(10, half);
        long c = y / (long) Math.pow(10, half);
        long d = y % (long) Math.pow(10, half);

        long ac = karatsubaMultiply(a, c);
        long bd = karatsubaMultiply(b, d);
        long adbc = karatsubaMultiply(a + b, c + d) - ac - bd;

        return (long) (ac * Math.pow(10, 2 * half) + adbc * Math.pow(10, half) + bd);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long x = sc.nextLong();
        long y = sc.nextLong();

        long product = karatsubaMultiply(x, y);
        System.out.println("Product: " + product);
        sc.close();
    }
}
========================================================
FLIPPING A BIT 

import java.util.*;
public class Main {
    public static int longestConsecutiveOnes(int n) {
        String binary = Integer.toBinaryString(n);
        int maxLength = 0;
        int currentLength = 0;
        int previousLength = 0;

        for (char bit : binary.toCharArray()) {
            if (bit == '1') {
                currentLength++;
            } else {
                maxLength = Math.max(maxLength, currentLength + previousLength + 1);
                previousLength = currentLength;
                currentLength = 0;
            }
        }
        maxLength = Math.max(maxLength, currentLength + previousLength + 1);
        return maxLength;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int longestSequence = longestConsecutiveOnes(n);
        System.out.println("The longest consecutive sequence of 1's  " + n + " is: " + longestSequence);
        sc.close();
    }
}
=======================================================
BYTE SWAP
import java.util.*;

public class Main {
    public static byte swapNibbles(byte b) {
        byte upperNibble = (byte) ((b & 0xF0) >>> 4);
        byte lowerNibble = (byte) (b & 0x0F);
        byte swappedByte = (byte) ((lowerNibble << 4) | upperNibble);
        
        return swappedByte;
    }

    public static void main(String[] args) {
        byte byteValue = (byte) 0xAB;  
        byte swappedByte = swapNibbles(byteValue);

        System.out.println("Original byte: " + Integer.toBinaryString(byteValue & 0xFF));
        System.out.println("Swapped byte: " + Integer.toBinaryString(swappedByte & 0xFF));
    }
}

=====================================================
BLOCK SWAP ALGORITHM

import java.util.*;

public class Main {
    public static void leftRotate(int arr[], int d, int n) {
        leftRotateRec(arr, 0, d, n);
    }

    public static void leftRotateRec(int arr[], int i, int d, int n) {
        if (d == 0 || d == n)
            return;
        if (n - d == d) {
            swap(arr, i, n - d + i, d);
            return;
        }
        if (d < n - d) {
            swap(arr, i, n - d + i, d);
            leftRotateRec(arr, i, d, n - d);
        } else 
        {
            swap(arr, i, d, n - d);
            leftRotateRec(arr, n - d + i, 2 * d - n, d);
        }
    }

    public static void printArray(int arr[], int size) {
        int i;
        for (i = 0; i < size; i++)
            System.out.print(arr[i] + " ");
        System.out.println();
    }
    public static void swap(int arr[], int fi, int si, int d) {
        int i, temp;
        for (i = 0; i < d; i++) {
            temp = arr[fi + i];
            arr[fi + i] = arr[si + i];
            arr[si + i] = temp;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
            System.out.print("Enter the number of elements in the array: ");
            int n = scanner.nextInt();
            int arr[] = new int[n];
            System.out.println("Enter the elements of the array:");
            for (int i = 0; i < n; i++) {
                arr[i] = scanner.nextInt();
            }
            System.out.print("Enter the number of positions to rotate left: ");
            int d = scanner.nextInt();
            leftRotate(arr, d, n);
            System.out.print("Rotated array: ");
            printArray(arr, n);
        
            scanner.close();
        
    }
}
======================================================
MAXIMUM PRODUCT SUBARRAY 

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of elements in the array: ");
        int n = sc.nextInt();

        int[] a = new int[n];
        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        int max = a[0];
        int m = a[0];
        int min = a[0];
        int temp = 0;

        for (int i = 1; i < n; i++) {
            if (a[i] > 0) {
                max = Math.max(a[i], max * a[i]);
                min = Math.min(a[i], min * a[i]);
            } else if (a[i] == 0) {
                max = min = 0;
            } else {
                temp = max;
                max = Math.max(a[i], min * a[i]);
                min = Math.min(a[i], temp * a[i]);
            }
            m = Math.max(m, max);
        }

        System.out.println("Maximum product: " + m);
        sc.close();
    }
}
===============================================
EQUILIBRIUM SUM

import java.util.*;

public class Main {
    public static int getMaxEquilibriumSumOptimized(int[] arr) {
        int totalSum = 0;
        int leftSum = 0;
        int maxSum = Integer.MIN_VALUE;

        for (int i = 0; i < arr.length; i++) {
            totalSum += arr[i];
        }

        for (int i = 0; i < arr.length; i++) {
            totalSum -= arr[i];
            if (leftSum == totalSum && leftSum > maxSum) {
                maxSum = leftSum;
            }
            leftSum += arr[i];
        }
        return maxSum;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of elements in the array: ");
        int n = sc.nextInt();

        int[] arr = new int[n];
        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        int maxSum = getMaxEquilibriumSumOptimized(arr);
        System.out.println("Max Equilibrium Sum: " + maxSum);

        sc.close();
    }
}
================================================================
LEADER IN AN ARRAY 

import java.util.*;
public class Main {
    public static void printLeaders(int arr[], int size) {
        int max_from_right = arr[size - 1];
        System.out.print(max_from_right + " ");

        for (int i = size - 2; i >= 0; i--) {
            if (max_from_right < arr[i]) {
                max_from_right = arr[i];
                System.out.print(max_from_right + " ");
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of elements in the array: ");
        int n = sc.nextInt();

        int[] arr = new int[n];
        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        printLeaders(arr, n);
        sc.close();
    }
}
=====================================================
LEXICOGRAPHICALLY PALINDROME 

import java.util.*;
class Main{
public	static char MAX_CHAR = 26;
public	static void countFreq(String str, int freq[], int len)
	{
		for (int i = 0; i < len; i++)
		{
			freq[str.charAt(i) - 'a']++;
		}
	}
public	static boolean canMakePalindrome(int freq[], int len)
	{
		int count_odd = 0;
		for (int i = 0; i < MAX_CHAR; i++)
		{
			if (freq[i] % 2 != 0)
			{
				count_odd++;
			}
		}
		if (len % 2 == 0)
		{
			if (count_odd > 0)
			{
				return false;
			}
			else
			{
				return true;
			}
		}
		if (count_odd != 1)
		{
			return false;
		}

		return true;
	}
public	static String findOddAndRemoveItsFreq(int freq[])
	{
		String odd_str = "";
		for (int i = 0; i < MAX_CHAR; i++)
		{
			if (freq[i] % 2 != 0)
			{
				freq[i]--;
				odd_str = odd_str + (char) (i + 'a');
				return odd_str;
			}
		}
		return odd_str;
	}
	public static String findPalindromicString(String str)
	{
		int len = str.length();
		int freq[] = new int[MAX_CHAR];
		countFreq(str, freq, len);

		if (!canMakePalindrome(freq, len))
		{
			return "No Palindromic String";
		}
		String odd_str = findOddAndRemoveItsFreq(freq);

		String front_str = "", rear_str = " ";
		for (int i = 0; i < MAX_CHAR; i++)
		{
			String temp = "";
			if (freq[i] != 0)
			{
				char ch = (char) (i + 'a');
				for (int j = 1; j <= freq[i] / 2; j++)
				{
					temp = temp + ch;
				}
				front_str = front_str + temp;
				rear_str = temp + rear_str;
			}
		}
		return (front_str + odd_str + rear_str);
	}

	public static void main(String[] args)
	{
		String str = "malayalam";
		System.out.println(findPalindromicString(str));
	}
}
======================================================
MAJORITY ELEMENT 

import java.util.*;
public class Main {
    static void findMajority(int arr[], int n) {
        int maxCount = 0;
        int index = -1;
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (arr[i] == arr[j])
                    count++;
            }
            if (count > maxCount) {
                maxCount = count;
                index = i;
            }
        }
        if (maxCount > n / 2)
            System.out.println(arr[index]);

        else
            System.out.println("No Majority Element");
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of elements in the array: ");
        int n = sc.nextInt();

        int[] arr = new int[n];
        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        findMajority(arr, n);

        sc.close();
    }
}
========================================================